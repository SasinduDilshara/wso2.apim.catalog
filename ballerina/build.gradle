/*
 * Copyright (c) 2024, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

apply plugin: 'io.ballerina.plugin'

description = 'Ballerina - Wso2 API Manager service catalog'

def packageName = "wso2.apim.catalog"
def packageOrg = "ballerinax"

def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

configurations {
    externalJars
}

dependencies {
    externalJars(group: 'io.ballerina', name: 'ballerina-to-openapi', version: "${openapiVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "${fasterxmlJacksonCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${fasterxmlJacksonCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${fasterxmlJacksonCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${fasterxmlJacksonCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${fasterxmlJacksonCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'io.swagger.core.v3', name: 'swagger-models', version: "${swaggerVersion}") {
        transitive = false
    }
    externalJars(group: 'io.swagger.parser.v3', name: 'swagger-parser-core', version: "${swaggerParserVersion}") {
        transitive = false
    }
    externalJars(group: 'io.swagger.core.v3', name: 'swagger-core-jakarta', version: "${swaggerVersion}") {
        transitive = false
    }
    externalJars(group: 'io.swagger.parser.v3', name: 'swagger-parser-v3', version: "${swaggerParserVersion}") {
        transitive = false
    }
    externalJars(group: 'io.swagger.parser.v3', name: 'swagger-parser', version: "${swaggerParserVersion}") {
        transitive = false
    }
    externalJars(group: 'org.yaml', name: 'snakeyaml', version: "${snakeYamlversion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        newBallerinaToml = newBallerinaToml.replace("@fasterxml.version@", fasterxmlJacksonCoreVersion)
        newBallerinaToml = newBallerinaToml.replace("@swagger.version@", swaggerVersion)
        newBallerinaToml = newBallerinaToml.replace("@swagger.parser.version@", swaggerParserVersion)
        newBallerinaToml = newBallerinaToml.replace("@fasterxml.version@", fasterxmlJacksonCoreVersion)
        newBallerinaToml = newBallerinaToml.replace("@snakeyaml.version@", snakeYamlversion)
        ballerinaTomlFile.text = newBallerinaToml

        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newCompilerPluginToml = newCompilerPluginToml.replace("@openapi.version@", openapiVersion)
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

task deleteDependencyTomlFiles {
    if (project.hasProperty("deleteDependencies")) {
        delete "${project.projectDir}/Dependencies.toml"
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
build.dependsOn deleteDependencyTomlFiles

test.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-compiler-plugin:build"

publishToMavenLocal.dependsOn build
publish.dependsOn build